const command	= require('command');
const fs		= require('fs');
const stream	= require('stream');
const Highland	= require('highland');
const path		= require('path');

const { tag, helpers } = require('vue-vnode-helper');
const { section, div, i, button, span, template } = helpers;

module.exports = command('ls [location]',
	'Lists the contents of a given directive'
)
.display('text/html', (file) =>
	tag('b-dropdown', '.seg-box.col-xs-3.col-md-4.col-sm-5.col-lg-4', [
		template({
			slot: 'button-content'
		}, [
			i(`.glyphicon.text-center.fa-2x.col-3
				${file.icon}`,
				{'aria-hidden': true}
			),
			span('.col-8', file.name)
		]),
		tag('b-dropdown-header', {}, file.name),
		tag('b-dropdown-item', { props: { href: '#' } },
			(file.type === 'directory')?
				'Set to current directory':
				'Open file'
		)
	])
)
.action(({_: [location], $stdout}) => {
	#realpath(location || '') |>
	#then(([abspath]) => {
		fs.readdir(abspath, (err, files) => {
			files |> #map((file) => {
				return new Highland([
					new Highland(#mimetype(file)),
					Highland.wrapCallback(fs.stat)(
						path.join(abspath, file)
					)
				])
				.flatten()
				.collect()
				.map(([mimetype, stat]) => {
					let icon = '.fa.fa-file';

					if (stat.isDirectory()) {
						icon = '.fa.fa-folder-open';
					}
					else if (mimetype.mime.match(/image\/.*/)) {
						icon += '.fa.fa-file-image-o';
					}
					else if (mimetype.mime.match(/video\/.*/)) {
						icon += '.fa.fa-file-video-o';
					}
					else if (mimetype.extension) {
						icon += `.fa-file-${mimetype.extension}-o`;
					}

					return {
						fullpath: path.join(abspath, file),
						name: file,
						type: (stat.isDirectory())?
							'directory':
							'file',
						mimetype: (stat.isFile())?
							mimetype.mime:
							null,
						icon: icon
					};
				})
			}) |> Highland.pipeline(
				Highland.flatten()
			) |> $stdout;
		});
	});
});
