const command	= require('command');
const fs		= require('fs');
const stream	= require('stream');
const Highland	= require('highland');
const path		= require('path');

module.exports = command('ls [location]',
	'Lists the contents of a given directive'
)
.display('text/html', (file) => `
	<div class="col-xs-6 col-md-3 col-sm-4 col-lg-4 seg-box" uib-dropdown uib-dropdown-toggle role="menu">
		<ul uib-dropdown-menu>
			<li>
				<a local-ref="src.fullpath">
					<span ng-if="src.type === 'directory'">
						Set to current directory
					</span>
					<span ng-if="src.type === 'file'">
						Open file
					</span>
				</a>
			</li>
			<li>
				<a ngclipboard data-clipboard-text="{{src.name}}">
					Copy name
				</a>
			</li>
			<li>
				<a ngclipboard data-clipboard-text="{{src.fullpath}}">
					Copy full path
				</a>
			</li>
		</ul>
		<i ng-if="src.icon"
			class="glyphicon text-center fa-2x
				col-xs-3 col-md-2 col-sm-4 col-lg-3"
			ng-class="src.icon"
			aria-hidden="true">
		</i>
		<div class="col-xs-7 col-md-8 col-sm-7 col-lg-7">
			{{src.name}}
		</div>
	</div>
`)
.action(({_: [location], $stdout}) => {
	#realpath(location || '') |>
	#then(([abspath]) => {
		fs.readdir(abspath, (err, files) => {
			files |> #map((file) => {
				return new Highland([
					new Highland(#mimetype(file)),
					Highland.wrapCallback(fs.stat)(
						path.join(abspath, file)
					)
				])
				.flatten()
				.collect()
				.map(([mimetype, stat]) => {
					let icon = 'fa fa-file';

					if (stat.isDirectory()) {
						icon = 'glyphicon-folder-open';
					}
					else if (mimetype.mime.match(/image\/.*/)) {
						icon += ' fa fa-file-image-o';
					}
					else if (mimetype.mime.match(/video\/.*/)) {
						icon += ' fa fa-file-video-o';
					}
					else if (mimetype.extension) {
						icon += ` fa-file-${mimetype.extension}-o`;
					}

					return {
						fullpath: path.join(abspath, file),
						name: file,
						type: (stat.isDirectory())?
							'directory':
							'file',
						mimetype: (stat.isFile())?
							mimetype.mime:
							null,
						icon: icon
					};
				})
			}) |> Highland.pipeline(
				Highland.flatten()
			) |> $stdout;
		});
	});
});
