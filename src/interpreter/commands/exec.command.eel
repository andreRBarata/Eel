const command		= require('command');
const spawn			= require('child_process').spawn;
const Highland		= require('highland');
const AnsiToHtml	= require('ansi-to-html');

module.exports = command('exec <command> [args...]')
	.receives('text/x-ansi')
	.display('text/x-ansi', (data) => data) //TODO: Test for empty mapping
	.display('text/html', (data) => {
		return `<span class="native-command">${
			new AnsiToHtml({
				newline: true
			}).toHtml(data)
		}</span>`;
	})
	.action(({_: $arguments, $stdin, $stdout}, push) => {
		let [commandname, ...args] =
			$arguments;
		let systemProcess = spawn(
			commandname,
			args, {
				env: process.env,
				cwd: process.cwd()
			}
		);

		systemProcess.stdout |>
			Highland.pipeline(
				Highland
					.splitBy(/([^\n]+\n)/),
				Highland
					.filter((line) => line !== '')
			) |> $stdout;

		systemProcess.on('close', () => {
			push(null);
		});

		//TODO: Add readable error messages
		systemProcess
			.on('error', (err) =>
				push(new Error(err))
			);

		systemProcess.stderr.on('readable',
			() => {
				let chunk = systemProcess
					.stderr
					.read();

				if (chunk !== null) {
					push(new Error(chunk));
				}
			}
		);

		$stdin |> systemProcess.stdin;
	});
