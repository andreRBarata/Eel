const command	= require('command');
const Highland	= require('highland');

const helptext = `
Eelscript, the language used on this terminal, is a superset of Javascript.
It adds syntax to allow easy execution of commands native to the system and commands designed for this shell. Commands are identified by the hash symbol (i.e \`#ls\`). Both native and Eelscript commands are called this way.

---

# Command calls
**Can be called using either of two methods:**

## Stringy call (e.g \`#ls src\`)
All parameters in front of the call are presumed to be strings and are split using spaces. To include a string with spaces as a single parameter quotes either single ('), double (") and template (\\\`) can be used.
It is possible to use a variable in this type of call using template symbol \${code}. (e.g \`#ls \${variable}\`)

## Standard call (e.g \`#ls("src")\`)
In this form of call works like the standard functions in Javascript. Currently does not allow spaces between the command an the parameters (\`#ls ("src")\`).

---

# Pipes and Redirections

It is possible to pipe two commands using the operator "|>".

*Example:* \`#ls |> #cat\`


---

# Eelscript Commands

{{#each commands}}
## #{{name}} {{usage}}
{{description}}

	{{#each options}}
		{{#each flags}}
&nbsp;&nbsp;&nbsp;
**{{fullflag}}{{#unless @last}},{{/unless}}**
		{{/each}}
		{{description}}
	{{/each}}

{{/each}}
`;

module.exports = command('help', 'Shows the instructions for this shell')
	.display('text/html', (data) => data)
	.display('text/x-ansi', (data) => data)
	.action(({$stdout}) => {
		#handlebars(
			helptext, {
				commands: Object.keys(process.sys)
					.map((command) => {
						return {
							name: command,
							description: process.sys[command]
								.description(),
							usage: process.sys[command]
								.usage().string,
							options: process.sys[command]
								.option()
						};
					})
			}
		) |> #marked |> $stdout;
	});
