const command	= require('command');
const fs		= require('fs');
const util		= require('util');
const Highland	= require('highland');
const mime		= require('mime');

module.exports = command('cat [path]')
	.option('-n, --number')
	.display('text/html', (data) => {
		let mimetype = data.mimetype || '';

		if (mimetype.match(/image\/.*/)) {
			return `<img class="img-rounded img-responsive center" ng-src="{{src.path}}"></img>`;
		}
		else if (mimetype.match(/video\/.*/)) {
			return `<video class="img-rounded img-responsive center" controls ng-src="{{src.path}}"></video>`;
		}
		else if (mimetype.match(/audio\/.*/)) {
			return `<audio class="center" controls ng-src="{{src.path}}"></audio>`;
		}

		return `<textarea ui-codemirror="{
			viewportMargin: src.content
				.split('\\n').length,
			readOnly: 'nocursor',
			lineWrapping: true,
			lineNumbers: src.options
				.lineNumbers,
			mode: src.mimetype
		}" ng-model="src.content"></textarea>`;

	})
	.action(({_: [path], $stdin, $stdout, number}, push) => {
		if (path) {
			#realpath(path) |>
			#map((realpath) => {
				fs.createReadStream(realpath) |>
				#then((content) => {
					let mimetype = mime.lookup(path)
						.replace('application', 'text');

					push({
						path: realpath,
						mimetype: mimetype, //TODO: Replace this
						get content() {
							return content.join('');
						},
						set content(value) {

						},
						options: {
							lineNumbers: number || false
						}
					});

					push(null);
				});
			});
		}
		else {
			//TODO: Fix me
			$stdin |> #map((data) => {
				return {
					mimetype: 'text/object-description',
					content: util.inspect(data),
					options: {
						lineNumbers: number || false
					}
				}
			}) |> $stdout;
		}

	});
