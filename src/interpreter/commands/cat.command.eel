const command	= require('command');
const fs		= require('fs');
const util		= require('util');
const Highland	= require('highland');
const mime		= require('mime');

module.exports = command('cat [location]', 'Displays the contents of a file (Image, sound, video or text)')
	.option('-n, --number', 'Shows line numbers (if applicable)')
	.display('text/html', (data) => {
		let mimetype = data.mimetype || '';

		if (mimetype.match(/image\/.*/)) {
			return `<img class="img-rounded img-responsive center" ng-src="{{src.path}}" ng-init="scrollDown()"></img>`;
		}
		else if (mimetype.match(/video\/.*/)) {
			return `<video class="img-rounded img-responsive center" controls ng-src="{{src.path}}" ng-init="scrollDown()"></video>`;
		}
		else if (mimetype.match(/audio\/.*/)) {
			return `<audio class="center" controls ng-src="{{src.path}} ng-init="scrollDown()""></audio>`;
		}

		return `<div highlighted-block
			numbers="src.options.lineNumbers"
			mimetype="src.mimetype"
			src="src.content">
		</div>`;

	})
	.action(({_: [location], $stdin, $stdout, number}, push) => {
		if (location) {

			Promise.all([
				#mimetype(location),
				#realpath(location)
			]) |> #then(([[mimetype, realpath]]) => {
				push({
					path: realpath,
					mimetype: mimetype.mime, //TODO: Replace this
					content: fs.createReadStream(realpath),
					options: {
						lineNumbers: number || false
					}
				});

				push(null);
			});
		}
		else {
			//TODO: Fix me
			$stdin |> #map((data) => {
				return {
					mimetype: 'text/object-description',
					content: util.inspect(data),
					options: {
						lineNumbers: number || false
					}
				}
			}) |> $stdout;
		}
	});
